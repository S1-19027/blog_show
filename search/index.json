[{"content":"前言 静态博客已成为现代技术博客、个人站点和文档系统的热门选择。\n本文基于Hugo\nHugo优势 生产的性能好。Hugo是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\n无论是Hugo还是Hexo，本质上都是将master文件通过预定好的模板渲染html文件\n环境准备 下载golang\n下载node.js\n安装golang 安装hugo之前，先安装好golang，推荐安装最新版本。\n安装时选择安装目录为 C:\\Users\\sky\\work\\soft\\golang 或者 D:\\sky\\work\\soft\\golang。\n修改环境变量，将 GOPATH 的值修改为 C:\\Users\\sky\\work\\soft\\gopath 或者 D:\\sky\\work\\soft\\gopath（默认为 %USERPROFILE%\\go）。\n安装nodejs/npm 为了使用Google Docsy主题，需要安装nodejs/npm。\n在网站下载nodejs\n安装时选择安装路径为C:\\Users\\sky\\work\\soft\\nodejs或者 D:\\sky\\work\\soft\\nodejs。\n安装Hugo 在Hugo Releases页面下载对应操作系统版本的安装包。Hugo官方下载文档 ,如hugo_extended_0.150.0_windows-amd64.zip.下载下来之后，解压缩，将 hugo.exe 文件复制到目录下。\n然后修改环境变量，在 Path 中增加这个路径， 验证安装 $ which hugo 、$ hugo version。\n切记由于 hugo和主题之间版本有依赖关系，因此不同主题选择不同版本\n打开命令提示符，输入hugo version来验证安装是否成功。\nHugo安装完成后的配置工作 设置别名\n为了方便使用，增加 hugo server 命令的 alias 用来本地编辑时的实时预览： vi ~/.zshrc 增加内容：\n1 2 3 4 5 # hugo alias h=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34;\u0026#39; alias h2=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 2323\u0026#39; alias h3=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 3333\u0026#39; alias h4=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 4343\u0026#39; hugo命令行参数说明：\n-D: 等同\u0026ndash;buildDrafts，标记为 Draft 的内容也会一起构建，方便在本地编写和预览新的暂时未发布的内容。\n-F: 等同\u0026ndash;buildFuture，发布时间为\u0026quot;未来\u0026quot;(即时间比当前时间还要晚)内容也会一起构建，方便在本地编写和预览新的暂时未发布的内容。 \u0026ndash;disableFastRender：当内容修改时，进行完整的重新构建，避免预览的内容不够新 h2/h3/h4 指定了不同的端口，当需要在本地打开多个时，可以使用固定端口而不是随机端口。\n设置代理 npm代理 主要是 npm 命令需要代理才能顺利下载文件，比如:安装 PostCSS 要构建或更新站点的 CSS 资源，您还需要PostCSS创建最终资产。\n如果您需要安装它，您必须在您的机器上安装最新版本的NodeJS，以便您可以使用npmNode 包管理器。\n默认情况npm下，在您运行的目录下安装工具\n1 2 3 4 npm install： npm install -D autoprefixer npm install -D postcss-cli npm install -D --save autoprefixer 如果发生报错，并且查看到如下的错误信息\n1 2 3 4 5 6 7 8 path /home/sky/work/code/learning/docsy/\u0026gt;node_modules/hugo-extended command failed command sh -c node postinstall.js ✖ Hugo installation failed. : node:internal/process/promises:391 triggerUncaughtException(err, true /\u0026gt;*fromPromise*/); ^ RequestError: getaddrinfo ENOTFOUND github.com 解决方式：\n1 2 3 npm config set registry \u0026lt;https://registry.npmmirror.com\u0026gt; npm config set proxy \u0026lt;http://192.168.2.1:7890\u0026gt; npm config set https-proxy \u0026lt;http://192.168.2.1:7890\u0026gt; 如果遇到报错信息：\n1 2 Failed to connect to github.com port 443 after 21045 ms Could not connect to server 注意修改成自己的IP和端口号\n1 2 git config --global http.proxy \u0026lt;http://127.0.0.1:7890\u0026gt; git config --global https.proxy \u0026lt;http://127.0.0.1:7890\u0026gt; 站点骨架 每个 Hugo 项目都是一个目录，其中的子目录贡献于站点的内容、结构、行为和呈现。\n在创建新站点时，Hugo 会生成一个项目骨架。例如，以下命令：\n利用hugo new site myblog(此时需要用到hugo.exe,假设存放在bin下),会在bin下生成myblog\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 myblog/ ├── archetypes #新建内容的模板（原型），方便统一管理文章格式，用于新建内容时自动填充默认 Front Matter │ └── `default.md` |--assests #目录包含通常通过资源管道传递的全局资源。包括图片、CSS、Sass、JavaScript 和 TypeScript 等资源。 ├── hugo.toml # 博客站点的配置文件 ├── content # 博客文章所在目录.目录包含组成站点内容的标记文件（通常是 markdown）和页面资源 ├── data #目录包含用于增强内容、配置、本地化和导航的数据文件（JSON、TOML、YAML 或 XML），供模板调用 |----i18n #目录包含多语言站点的翻译表。 ├── layouts # 自定义网站布局。目录包含将内容、数据和资源转换为完整网站的模板。决定网站的外观和布局。主题通常也会提供一套layouts，当你用自定义（不使用主题）时候可以在此覆盖主题默认模板。（hugo 初始化的layouts并不包含任何主题） ├── static # 一些静态内容，目录包含在构建站点时将复制到 public 目录的文件，例如 .ico、.txt 和用于验证站点拥有权的文件。在引入 页面包 和 资源管道之前，static 目录也用于存放图片、CSS 和 JavaScript 等资源 └── themes # 博客主题， 目录包含一个或多个主题，每个主题位于自己的子目录中。包含自己的layouts、static、配置文件等。启用主题后，Hugo首先会从主题中加载布局文件，再加载站点内自定义的覆盖文件 根据需要，可以将站点配置组织到子目录中： |---config/ #目录包含站点配置，可能分为多个子目录和文件。对于配置较少或不需要在不同环境中以不同方式运行的项目，项目根目录中的单个 hugo.toml 配置文件就足够了。 |___ _default/ |_____config.toml #全局配置文件 config.toml\nHugo的全局配置文件，用于定义站点的基本信息、URL、语言、主题、菜单等。也可以使用config.yaml/config.json\ncontent/\n​\t存放所有博客文章和页面。每个markdown文件的Front matter中定义标题、日期、草稿状态、标签与分类等信息。\n​\t示例文件：\ntitle:\u0026quot;我的第一篇文章\u0026quot; date:2024-03-21 draft:false tags:[\u0026quot;入门\u0026quot;、“Hugo”] categories:[“技术博客”] 这里是文章内容 archetypes/ ​\t定义新建内容时所用的模板（原型），方便统一管理文章格式。你可以自定义默认模板以满足特定格式要求\n​\t下有模板index.md\n1 2 3 4 5 6 7 8 9 10 11 12 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; # 标题，创建时自动填充 slug: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; #URL标识符，如果没有则于title相同 description: # 文章简介 date: {{ .Date }} # 日期，创建时自动填充，格式同 2023-01-15T12:00:00+08:00 image: # 文章的封面，留空就是没有，填文章所在位置的相对地址，通常放在同目录下， math: # 是否启用 KaTex，填 true 启用 license: # 文章尾部显示的协议，false 为隐藏，其他作为内容，留空就是使用 config.yaml 里默认的 hidden: false # 是否隐藏，一般用不到 comments: true # 因为 bug 所以这个属性只要存在，不管是 true 还是 false 都会导致回复无法显示，需要删掉 draft: true # 是否为草稿，建议改为 false 或者删掉这个属性以防止忘记修改，毕竟我们一般都是写好了才部署到服务器上 --- layouts/\n存放网站页面模板文件，决定网站的外观和布局。主题通常也会提供一套layouts，当你需要自定义时可以自此覆盖主题默认模板\nstatic/\n内容所有不会经过Hugo处理的静态文件，如图片、CSS文件、JS文件等。生成网站时，这些文件会直接复制到输出目录。\nthemes/\n存放第三方主题，每个主题通常都包含自己的layouts、static、配置文件等。启用主题后，Hugo会先从主题中加载布局文件，再加载站点内自定义的覆盖文件。\n利用Hugo命令构建站点时，Hugo 会创建一个 public 目录，目录包含发布的网站，在运行 hugo 命令时生成。Hugo 根据需要重建此目录及其内容。 通常还会创建一个 resources 目录：目录包含 Hugo 资源管道的缓存输出，在运行 hugo 或 hugo server 命令时生成。默认情况下，此缓存目录包括 CSS 和图片。Hugo 根据需要重建此目录及其内容。 Hugo 创建了一个联合文件系统，允许将两个或多个目录挂载到同一位置。例如，假设您的主目录包含一个 Hugo 项目的目录，另一个目录包含共享内容。您可以使用挂载（mounts）在构建站点时包含共享内容。 在站点配置中当两个或多个文件具有相同路径时，优先级顺序遵循挂载的顺序。例如，如果共享内容目录包含 books/book-1.md，则会被忽略，因为项目的 content 目录先被挂载。 将archetypes/default.md,\u0026quot;+\u0026ldquo;改成\u0026rdquo;-\u0026quot;,\u0026quot;=\u0026ldquo;改成\u0026rdquo;+\u0026quot;，因为这个时toml格式的，我们要改成yaml格式 配置主题 下载主题 ​\t以Stack为例，下载发布页面.把解压好的主题放在themes下，并把后面的版本号如3.3.10去掉\n​\t或者将存储库克隆到 themes/hugo-theme-stack\n​\tgit clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack\n​\t或者如果您已经在您的网站中使用 Git，则可以通过在 Hugo 网站的根目录中运行以下命令将主题添加为子模块：\n​\tgit submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack\n把子模块的hugo-theme-stack里的layouts复制出来，复制到myblog下的layouts\n在hugo-theme-stack里examplesite里面的content和hugo.yaml,复制到myblog 下，然后把原来的hugo.toml删掉\n1 2 3 4 5 6 7 示例 baseurl: https://example.com/ languageCode: en-us theme: hugo-theme-stack#指定主题 title: Example Site copyright: Example Person DefaultContentLanguage: zh-cn# 默认语言 然后在终端执行hugo，进行构建（如果有一些我们没有，删除content下post的内容，只留下chinese-test）\n同一个文件可以通过多个markdown，后缀名不同来实现。默认的index就是默认的名字 zh-cn# 默认语言，默认的主题下的名字。如果。即content/post/chinese-test下的 index-zh-cn.md可以通过index-zh-cn来改变在中文界面显示。index-en会在英文界面下显示。\n方法一：通过文件后缀名实现\n你想要的效果 做法 只在中文站显示 只创建 index.zh-cn.md 只在英文站显示 只创建 index.en.md 中英文都显示 创建 index.zh-cn.md 和 index.en.md 根据默认语言 只创建 index.md（使用默认语言，在blog/hugo.yaml） 方法二：通过Front Matter指定\nyaml\n1 2 # 在文章前面的Front Matter中强制指定语言 lang: zh-cn # 这篇文章只在中文本显示 ​\n文章开头可以有cataglories分类和用来打tags标签\n注意：如果创建多级文件夹时文章文件名不是 index.md 或者类别、标签文件名不是 _index.md 的话，设置封面图片会出现问题。\n如何快速创建一个文章？hugo new potst/test/index.md,就生成了test/index.md,将draft:true改成draft:false（此时是在content/post下）\n1 2 3 4 5 6 7 8 9 10 11 title: Chinese Test description: 这是一个副标题 date: 2020-09-09 slug: test-chinese image: helena-hertz-wWZzXlDpMog-unsplash.jpg categories: - Test - 测试 - HLE tags: - lf 常用命令 命令 说明 hugo new post/test/index.md 创建新文章。新建文章后，Hugo会在content/post目录下生成一份Markdown文件，并根据archetypes中的模板填充默认Front Matter hugo server -D 启动本地服务器预览，使用-D参数可包含草稿内容进行预览 hugo 构建站点（生成静态文件到public/目录） hugo \u0026ndash;cleanDestinationDir 清理构建文件并重新生成 hugo \u0026ndash;minify 构建并压缩HTML/CSS/JS文件（适合生产部署） hugo new site [path] 创建一个新站点 hugo server 启动本地服务器预览 hugo config 显示站点配置信息 hugo list drafts 列出所有处于草稿状态的文章 常用参数\n-D ,\u0026ndash;buildDrafts:包括草稿文章 -F，\u0026ndash;buildFuture:包括未来发布的文章 -E，\u0026ndash;buildExpired：包括已过期的文章 \u0026ndash;minify:生成时压缩输出文件 \u0026ndash;gc:构建时运行垃圾回收 在content/page里修改左侧的内容\n404 Page Not Found 注意，一旦网站可以建立，那么除非你做一个新的文件，否则就一直404\nhugo server \u0026ndash;theme=your_theme_name(echo \u0026ldquo;theme = \u0026lsquo;ananke\u0026rsquo;\u0026rdquo; \u0026raquo; hugo.toml)，这个相当于向hugo.toml添加theme 删去 hugo.toml,保留config.toml 推荐：在 config.toml 中写 theme = \u0026quot;your_theme_name\u0026quot;\n临时：命令行 hugo server --theme=your_theme_name\n如果需要更多,如配置favicon，评论区，参考建站技术 | 使用 Hugo + Stack 简单搭建一个博客\nGithub推送自动化 在使用 GitHub Pages 构建并托管博客时，我们面临一个常见问题：如何在保持源码安全的同时，将构建好\n的 public 文件用于页面展示。直接丢上去的往往是public文件。为了解决这一问题，我们可以通过创建两个 GitHub 仓库来实现不同用途的分离和自动化管理。\n源码仓库（source_blog） 用于存储博客相关的源码， 包括markdown文件、配置信息等未构建的内容 设置为Private仓库 展示仓库（blog_show) 用于存储构建后的文件（如public文件夹），供Github Pages或其他托管服务使用 设为Public仓库，确保可以正常访问页面 自动化流程 利用Github Actions或脚本实现如下自动化：\n在源码仓库更新时触发构建操作，生成博客所需的静态文件。将生成的文件自动推送到展示仓库，无需手动干预。\nSettings-\u0026gt;Developer Settings-\u0026gt;Personal access tokens -\u0026gt; Tokens(classic),勾选repo和workflow，过期时间选择永远不过期。generate token，然后复制生成的token。\n点开source_blog,Security-Secrets and variables-Actions-Repository secrets-New repository secret,填写2中生成的token。\n修改自动化代码(deploy.yml)，将修改分支改成master。将.github_hugo移到blog下，并且去掉_hugo,作为部署文件\ngit init 创建.git 文件\nEXTERNAL_REPOSITORY:xx/blog_show，展示的博客\n​\tblow_show里所展示的就是public里面的内容\nblow_show\u0026gt;Settings\u0026gt;Pages\u0026gt;Build and delployment，改成 master 和root 你可以在根目录创建一个批处理脚本，用来快速启动本地服务器并使用 chrome 打开网页。\n1 2 3 4 5 6 本地运行.bat @echo off echo [本地运行] start chrome http://localhost:1313/ #默认开放1313端口 hugo server pause 使用Netlify Add new project → import an existing project→选择blog_show\nTypora +PicGo 图床配置 下载PicGo\n创建一个新的仓库如blog_picture 设置为公开博客图片\n再次重复操作,生成一个blog_show,然后在PicGo里填写对应Token.\n这样子就可以通过PicGo上传了。\n但是我不想每次都得要先通过PicGo上传至Github，然后将链接如（https://raw.githubusercontent.com/S1-19027/blog_picture/master/image-20250925115857370.png）再复制到Markdown里的链接语法。\n我希望截图后就可以直接上传至github\n在Typora中：\n指定一下图形设置的上传服务设定\n插入图片时选择上传图片。\n阿里云图床,开通OSS教程：参考文献1、参考文献2\n注：阿里云的99元/年云服务器似乎不太行，还是老实买点2核4Gib的\n华为云相比较太贵了，更多的我也懒得去找了。\n使用云服务器 1 2 3 │ A new version (/tmp/tmp.QB1PQknVLa) of configuration file /etc/ssh/sshd_config is available, but the version installed currently has been locally modified. │ │ What do you want to do about modified configuration file sshd_config? 选择Install the package maintainer's version即可\n利用Nginx即可\n参考 hexo与hugo博客搭建与github自动化推送和服务器推送 Stack官方文档 ","date":"2025-09-23T00:00:00Z","permalink":"https://example.com/p/hugo-stack_blog_tutorial/","title":"Hugo + Stack 简单搭建一个静态博客"},{"content":"使用git命令下载主题 在myblog 目录下使用git 命令来下载主题hugo-theme-bootstrap4-blog： git clone \u0026lt;https://github.com/alanorth/hugo-theme-bootstrap4-blog.git\u0026gt; themes/hugo-theme-bootstrap4-blog 下载下来的主题会放在themes 目录中： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 └── hugo-theme-bootstrap4-blog ├── CHANGELOG.md ├── LICENSE.txt ├── README.md ├── archetypes ├── assets ├── exampleSite # 本主题示例内容 | ├── content # 示例博客文章 │ |-- static │ |-- config.toml # 本主题配置 ├── i18n ├── images ├── layouts ├── package-lock.json ├── package.json ├── screenshot.png ├── source ├── theme.toml └── webpack.config.js 使用主题 我们将exampleSite 目录中的内容，复制到博客根目录myblog 中，在myblog 目录中执行命令： cp themes/hugo-theme-bootstrap4-blog/exampleSite/* ./ -r 删除旧的hugo.toml (存疑将archetypes/default.md,\u0026quot;+\u0026ldquo;改成\u0026rdquo;-\u0026quot;,\u0026quot;=\u0026ldquo;改成\u0026rdquo;+\u0026quot;，因为这个时toml格式的，我们要改成yaml格式) 启动博客服务 使用下面命令启动服务： \u0026gt;\u0026gt;\u0026gt; hugo server 遇到错误 子模块可能没有被正确初始化，或者 .gitmodules 文件中的配置与实际的子模块路径不匹配. 1 2 3 /usr/bin/git -c protocol.version=2 submodule update --init --force Error: fatal: No url found for submodule path \u0026#39;themes/hugo-theme-bootstrap4-blog\u0026#39; in .gitmodules Error: The process \u0026#39;/usr/bin/git\u0026#39; failed with exit code 128 ​\t解决方法：添加子模块 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke.\n1 2 3 4 ERROR deprecated: .Site.Social was deprecated in Hugo v0.124.0 and subsequently removed. Implement taxonomy \u0026#39;social\u0026#39; or use .Site.Params.Social instead. ERROR deprecated: .Site.Authors was deprecated in Hugo v0.124.0 and subsequently removed. Implement taxonomy \u0026#39;authors\u0026#39; or use .Site.Params.Author instead. ​\t解决方法 如报错信息，找到对应并替换即可\nrange can't iterate over Your Name Hugo 提示 range can\u0026rsquo;t iterate over Your Name，这意味着你在模板中尝试使用 range 迭代一个字符串（Your Name）， 而 range 只能用于迭代数组、切片或映射（map），不能用于迭代单个字符串。\n你的.Site.Params.Author配置在config.toml里是：\n1 2 [params] author = \u0026#34;Your Name\u0026#34; executing \u0026quot;partials/twitter_cards.html\u0026quot; at \u0026lt;.twitter\u0026gt;: can't evaluate field twitter in type interface {}\n模板 partials/twitter_cards.html 里面，有类似这样的代码：\n1 2 3 {{ range .Site.Params.Author }} {{ .twitter }} {{ end }} 这段代码假设 Author 是一个数组或对象，每个元素都有 twitter 字段。\n但你提供的是字符串 \u0026quot;Your Name\u0026quot;，模板自然找不到 .twitter 字段 → 报错。\n方法 1：修改 config.toml 中的 author 配置 将 author 配置为一个对象或数组，而不是字符串。例如：\n1 2 3 4 5 6 7 [params] [params.author] author = \u0026#34;Your Name\u0026#34; twitter = \u0026#34;your_twitter\u0026#34; 如果你需要迭代多个作者，可以将 author 配置为一个数组：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 [params] [[params.author]] name = \u0026#34;Author 1\u0026#34; twitter = \u0026#34;author1_twitter\u0026#34; [[params.author]] name = \u0026#34;Author 2\u0026#34; twitter = \u0026#34;author2_twitter . 方法2：如果 author 必须是一个字符串（例如 author = \u0026ldquo;Your Name\u0026rdquo;），你需要修改模板文件，避免使用 range 迭代 .Site.Params.Author。 例如，将 twitter_cards.html 中的代码：\n1 2 3 4 5 {{ range .Site.Params.Author }} {{ .twitter }} {{ end }} 改为： {{ .Site.Params.Author }}\n方法 3：调试模板\n在 twitter_cards.html 中打印上下文，看看实际传入了什么：\n1 {{ printf \u0026#34;%#v\u0026#34; . }} 可以快速发现传入的上下文是否有 twitter 字段。 用于排查问题，非常有用。 方法 4：临时禁用 Twitter 卡片\n如果不需要 Twitter 卡片，可以在 head-meta.html 注释掉调用：\n1 {{/* {{ partial \u0026#34;twitter_cards.html\u0026#34; . }} */}} 避免报错，让网站能正常生成。 适合快速排查或暂时不需要社交卡片功能。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ hugo bash: line 1: hugo: command not found \u0026#34;build.command\u0026#34; failed ──────────────────────────────────────────────────────────────── Error message Command failed with exit code 127: hugo (https://ntl.fyi/exit-code-127) Error location In Build command from Netlify app: hugo Resolved config build: command: hugo commandOrigin: ui publish: /opt/build/repo/public publishOrigin: ui Build failed due to a user error: Build script returned non-zero exit code: 2 Failing build: Failed to build site Finished processing build request in 16.127s 这个错误表明在你的构建环境中，hugo 命令未找到。hugo 是一个用于生成静态网站的工具，而你的构建系统（这里是 Netlify）无法找到它。 解决方法：在 Netlify UI 中设置 Hugo 版本 如果你不想使用 netlify.toml 文件，可以通过 Netlify 的 UI 设置 Hugo 版本：\n登录 Netlify 并进入你的项目。\n导航到 Site settings \u0026gt; Build \u0026amp; deploy \u0026gt; Environment \u0026gt; Environment variables。\n添加一个环境变量：\nKey: HUGO_VERSION\nValue: 0.120.4（替换为你需要的 Hugo 版本）。\n保存并重新触发构建。\n推送的时候是master（主仓库，因为你没有权限）不是change（本地） ​\tgit commit -m \u0026quot;Add brand-bilibili icon\u0026quot; git push origin my-changes，写成git push origin master了\n​\t解决方法：回退 fork 的 master\n如果你必须把 fork 的 master 恢复到推送前的状态（例如不想把修改放在 master 上）：\n找到推送前的 commit：\n1 2 cd themes/hugo-theme-stack git log --oneline --decorate 记下误推前的 commit ID，例如 abcdef0。\n强制回退远程 master：\n1 2 3 git checkout master git reset --hard abcdef0 # 回到旧的 commit git push origin master --force 把你的修改推到新分支：\ngit checkout -b my-changes\ngit push origin my-changes\n更新父仓库指针： cd ../..\ngit add themes/hugo-theme-stack\ngit commit -m \u0026ldquo;Update submodule pointer to my-changes\u0026rdquo;\ngit push origin master\n如果你确实要修改主题源码（例如修改 theme 下的模板）\n此时子模块必须 fork，因为：\n你想改的文件在 themes/hugo-theme-stack/ 父仓库不会直接跟踪这些文件 每次修改流程：\n进入子模块：\n1 2 3 4 5 6 7 cd themes/hugo-theme-stack git checkout my-changes # 建议始终在自己分支 git pull origin my-changes # 保持同步 # 做修改 git add . git commit -m \u0026#34;Update theme style\u0026#34; git push origin my-changes 回到父仓库更新指针：\n1 2 3 4 cd ../.. git add themes/hugo-theme-stack git commit -m \u0026#34;Update submodule pointer\u0026#34; git push origin master 利用submodule来更新， 自己新建的没有更新是因为submodule没有更新\nDocsy主题 Docsy 是一个基于 Hugo 的主题，专门用于构建技术文档集。以下是一般 Docsy 项目的基本目录结构：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . ├── archetypes # 自定义模板定义 ├── assets # 存放静态资源，如样式表、JavaScript 和图片 │ ├── css # 主题和站点的自定义 CSS │ └── ... ├── content # 网站内容，包括页面和博客文章 │ ├── _index.md # 主页内容 │ ├── docs # 文档区域 │ │ └──_index.md # 文档首页 │ ├── blog # 博客文章 │ └── ... ├── data # YAML 数据文件，可用于自定义站点变量或数据 ├── layouts # 自定义布局文件 ├── static # 非 Hugo 处理的静态资源，将被直接复制到生成的站点中 ├── themes # 包含 Docsy 主题的子目录 项目的启动文件介绍 在 Docsy 项目中，主要的启动文件是 config.toml 或 config.yaml（取决于你的偏好）。这些配置文件位于项目根目录下，用来设置网站的基本参数、导航菜单、多语言支持等。\n例如，一个简单的 config.toml 文件可能如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #Hugo 属性设置 title = \u0026#34;我的文档站点\u0026#34; #网站地址 baseURL = \u0026#34;https://example.com/\u0026#34; #网站语言 languageCode = \u0026#34;en-us\u0026#34; # 网站title title = \u0026#34;我的博客\u0026#34; # 主题的名字，这个要跟myblog/themes 目录中的子目录的目录名一致 theme = \u0026#34;hugo-theme-bootstrap4-blog\u0026#34; # home/category/tag 页面显示的文章数 (Default: 10) paginate = 5 # home/category/tag 页面用于摘要的字数 (Default: 70) summaryLength = 50 # optionally override the site\u0026#39;s footer with custom copyright text # copyright = \u0026#34;Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).\u0026#34; #googleAnalytics = \u0026#34;UA-123-45\u0026#34; #disqusShortname = \u0026#34;XYW\u0026#34; # 博客链接的路径格式 [permalinks] posts = \u0026#34;/:year/:month/:title/\u0026#34; page = \u0026#34;/:slug/\u0026#34; 顶部栏 [[menu.main]] name = \u0026#34;首页\u0026#34; weight = 1 identifier = \u0026#34;home\u0026#34; url = \u0026#34;/\u0026#34; 侧边栏 [[menu.main]] name = \u0026#34;文档\u0026#34; weight = 2 identifier = \u0026#34;docs\u0026#34; url = \u0026#34;/docs/\u0026#34; #Theme 属性设置 # [params] # Site author author = \u0026#34;Your Name\u0026#34; # Description/subtitle for homepage (can be Markdown) description = \u0026#34;A simple Hugo theme based on the Bootstrap v4 blog example.\u0026#34; # Show header (default: true) #header_visible = true # Format dates with Go\u0026#39;s time formatting date_format = \u0026#34;Mon Jan 02, 2006\u0026#34; # verification string for Google Webmaster Tools #google_verify_meta = \u0026#34;BAi57DROASu4b2mkVNA_EyUsobfA7Mq8BmSg7Rn-Zp9\u0026#34; # verification string for Bing Webmaster Tools #bing_verify_meta = \u0026#34;3DA353059F945D1AA256B1CD8A3DA847\u0026#34; # verification string for Yandex Webmaster Tools #yandex_verify_meta = \u0026#34;66b077430f35f04a\u0026#34; # Optionally display a message about the site\u0026#39;s use of cookies, which may be # required for your site in the European Union. Set the parameter below to a # page where the user can get more information about cookies, either on your # site or externally, for example: #cookie_consent_info_url = \u0026#34;/cookie-information/\u0026#34; #cookie_consent_info_url = \u0026#34;http://cookiesandyou.com\u0026#34; # show sharing icons on pages/posts (default: true) #sharingicons = true # Display post summaries instead of content in list templates (default: true) #truncate = true # Disable the use of sub-resource integrity on CSS/JS assets (default: false) # Useful if you\u0026#39;re using a CDN or other host where you can\u0026#39;t control cache headers #disable_sri = false [params.sidebar] # Optional about block for sidebar (can be Markdown) about = \u0026#34;A simple Hugo theme based on the [Bootstrap v4 blog example](http://v4-alpha.getbootstrap.com/examples/blog/).\u0026#34; # How many posts to show on the sidebar (Default: 5) #num_recent_posts = 2 [params.social] # Optional, used for attribution in Twitter cards (ideally not a person # for example: nytimes, flickr, NatGeo, etc). # See: https://dev.twitter.com/cards/types/summary-large-image twitter = \u0026#34;username\u0026#34; # Default content language for Hugo 0.17\u0026#39;s multilingual support (default is \u0026#34;en\u0026#34;) # See: https://github.com/spf13/hugo/blob/master/docs/content/content/multilingual.md #DefaultContentLanguage = \u0026#34;en\u0026#34; # Languages to render #[languages.en] #[languages.bg] # Bulgarian date format is dd.mm.yyyy #date_format = \u0026#34;02.01.2006\u0026#34; # vim: ts=2 sw=2 et 在这个例子中，我们设置了网站的标题、基础 URL 和语言代码，以及两个主菜单项（首页和文档）。\n项目的配置文件介绍 config.toml/config.yaml 这是整个站点的核心配置文件，你可以在这里设定站点的基本信息、导航菜单、元数据参数、多语言支持等。 _config.yaml in /themes/docsy 尽管这不是项目本身的配置文件，但 Docsy 主题也有自己的_config.yaml。这个文件包含了 Docsy 提供的默认配置，可以在项目中的 config.toml/config.yaml 中覆盖或扩展。 .hugorc （可选） 如果你选择使用 JSON 格式的配置，可以创建一个 .hugorc 文件来存储配置。它的工作方式与 config.toml 类似。 archetypes 目录 此目录下的文件定义了创建新页面时的默认内容结构。例如，你可以创建一个 doc.md 文件作为文档页面的模板。 static 和 assets 目录 这两个目录分别存放静态文件和处理过的静态资源。static 直接包含要复制到生成站点的内容，而 assets 内的文件会经过诸如 Sass 编译等预处理器处理。 以上就是 Docsy 主题的基本介绍和使用指南。更多详细信息和高级配置，请参考 Docsy 的官方文档。\n自建主题骨架 创建新主题时，Hugo 会生成一个可用的主题骨架。例如，以下命令： hugo new theme my-theme 会创建以下目录结构(省略了子目录):\n1 2 3 4 5 6 7 8 9 10 11 12 ` my-theme/ ├── archetypes/ ├── assets/ ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ ├── LICENSE ├── `README.md` ├── hugo.toml └── theme.toml 使用上述描述的联合文件系统，Hugo 将每个目录挂载到项目的相应位置。当两个文件路径相同时，项目目录中的文件优先。这样，例如，您可以通过在项目目录相同位置放置一个副本来覆盖主题的模板。\n安装hexo npm install -g hexo-cli\n如何建立自己的（博客）域名 ​\t以blog.xyz.site为例\n首先选择域名注册商，如阿里云,购买自定义域名如xyz.site.可以自定义子域名，如blog.xyz.site。\n配置DNS记录\n为了让 blog.xyz.com 指向你的 Netlify 博客，需要在域名注册商那里设置 DNS：\n登录域名注册商控制台。 进入DNS 管理 或 域名解析 页面。 添加以下记录： CNAME 记录 主机名/名称/记录：blog 指向/值/记录值：你的 Netlify 默认域名（chenaasad.netlify.app） TTL：默认即可 ⚠️ 注意：不要同时为同一个子域名添加 A 记录，如果添加了 CNAME，就不要再加 A 记录。\n保存并等待 DNS 生效（通常几分钟到 24 小时）。 在 Netlify 添加自定义域\n登录 Netlify 控制台，进入你的站点设置。\n选择 Domain management → Custom domains → Add custom domain。\n即Set up Netlify DNS 输入你的域名 blog.xyz.com 并保存。\nNetlify 会自动检测你的 CNAME 配置是否正确，如果一切正常，它会颁发 SSL 证书（HTTPS）。\nNetlify 会自动为自定义域名生成免费的 Let\u0026rsquo;s Encrypt SSL 证书。\n你只需要确保在站点设置中开启 Enforce HTTPS（强制 HTTPS）。\n等证书生效后，你的博客就可以通过 https://blog.xyz.com 访问。\nDNS 是否已传播\n即便你已经添加了正确的 CNAME 记录，DNS 修改需要一定时间才能在全球生效。\n一般 10 分钟到 24 小时不等。 可以用以下工具查询是否已生效： https://dnschecker.org/#CNAME/blog.chenalna.site 看到解析结果是 chenaasad.netlify.app 才算成功。 是否开启了 CDN/代理\n如果你使用 Cloudflare 或类似服务：\n确保 blog 这一条记录**小云朵为灰色（DNS only）**而不是橙色（代理状态）， 因为橙色会隐藏真实 CNAME，导致 Netlify 无法验证。 验证完成并签发证书后，可以再开启代理。 为什么需要两个方向的绑定？ 阿里云的作用\n阿里云是域名注册商，它只负责：\n记录「访问 blog.chenalna.site 时去哪台服务器找内容」 也就是DNS 解析（把域名解析成 IP 或转发到另一个域名） 你在阿里云添加 CNAME 记录，只是告诉互联网： “访问 blog.chenalna.site 时，请先去找 chenalna.netlify.app”。\n阿里云并不知道 chenalna.netlify.app 是不是你的站点，也不会给你的网站签 SSL 证书。 它只是把访问者“指路”给 Netlify。\n2.Netfliy作用\n​\tNetlify 是托管服务商，它必须：\n确认这个域名是你的（防止别人盗用你的域名指到他们的服务器） 为这个域名签发 SSL 证书（HTTPS 加密） 配置站点路由，把 blog.chenalna.site 的请求交给你的博客程序 所以你在 Netlify → Domain management 添加域名， 就是告诉 Netlify： “这个域名是我的，DNS 我已经指到你们这里，请为它提供服务并签证书。”\n总结\n阿里云：相当于邮局的“地址登记处”，你告诉它：\n“有人找 blog.chenalna.site，就送到 Netlify。”\nNetlify：相当于你自己的“房子”，你得告诉它：\n“这个地址归我，请给这个地址挂上门牌和门锁（SSL证书）。”\n归纳\n1️⃣ 你输入 https://blog.chenalna.site\n浏览器需要找到这个域名的 IP。\n向 DNS 递归服务器（例如阿里云）查询 blog.chenalna.site 的记录。\n阿里云返回： CNAME chenalna.netlify.app\nblog.chenalna.site 的解析结果 等同于 chenalna.netlify.app， 解析这个域名。\n2️⃣ 浏览器继续查询 chenalna.netlify.app\n递归 DNS 服务器向 Netlify 的权威 DNS 查询 A/AAAA 记录。\nNetlify 返回一个或多个 IP（通常是 CDN/负载均衡节点）。\n浏览器最终得到托管服务器 IP。\n3️⃣ 浏览器建立 TCP/TLS 连接\n浏览器连接到刚刚得到的 IP。\n如果是 HTTPS，会先发起 TLS 握手：\n在 ClientHello 里带上 SNI（Server Name Indication）：\n1 blog.chenalna.site 这样服务器才能选择正确的 SSL 证书。\n4️⃣ 浏览器发送 HTTP 请求\n握手完成后，浏览器发送标准 HTTP 请求：\n1 2 3 4 GET / HTTP/1.1 Host: blog.chenalna.site User-Agent: ... Accept: ... 关键点：Host = blog.chenalna.site 。 即使连接的是 Netlify 的 IP， Host 告诉 Netlify：“我访问的是 blog.chenalna.site 项目。”\n5️⃣ Netlify 服务器返回内容\nNetlify 根据 Host 找到对应的项目（你 GitHub 部署的静态文件）。\n直接返回 HTML/CSS/JS 等静态资源。\n因为是静态站点，返回的就是最终网页文件，不需要再发起其他“对象请求”才能获取主体内容（除非页面里引用了图片、JS、CSS，这些的附属资源，会触发额外的 HTTP 请求）。\n域名类型 作用 是否必须 Netlify 子域名 chenalna.netlify.app Netlify 自动分配，始终可用，方便测试或直接访问 ✅ 自动拥有 自定义域名 blog.chenalna.site 你绑定的独立域名，用于品牌化访问 可选 它们共存，不冲突，访问最终落在同一个 Netlify 服务器和同一份内容上。\nNetlify 部署时，你在项目设置中指定了构建命令和输出目录（Publish directory）。 Netlify 会把这个目录里的内容部署到 CDN。 所以虽然仓库里你看不到一个手写的 index.html， Netlify 构建完成后生成的 index.html 才是浏览器实际拿到的页面入口。\nEdge自带问题 此网站的证书无效。由于此连接不安全，因此信息(如密码或信用卡)不会安全地发送到此网站，并且可能被其他人截获或看到。建议你不要在此网站输入个人信息或避免使用此网站。 DNS 解析未生效\n你在阿里云添加了 blog.chenalna.site 的 CNAME，但 DNS 还没有在全球生效。 Netlify 还没检测到域名指向它的服务器，因此 无法签发 SSL 证书。 生效时间通常 10 分钟到 24 小时不等。 与此站点的连接不安全此站点有一个由受信任的颁发机构颁发的有效证书。但是，网站的某些部分不安全。这意味着信息 (如密码或信用卡) 可能不会安全地发送到此站点，并可能被其他人截获或查看。 Let’s Encrypt 的证书 有效期为 90 天（约 3 个月）。\nNetlify 会在证书到期前 自动续签，无需手动干预。\n清除 Edge 缓存和证书状态\n打开 Edge → 设置 → 隐私、搜索和服务 → 清除浏览数据 → 勾选缓存文件、Cookie 也可以在地址栏输入 edge://net-internals/#dns → Clear host cache 再重新访问 https://blog.chenalna.site 脚本功能 copy_assests.sh ​\t将themes/hugo-theme-stack/assests下的文件复制到blog/assests下\nlocal_launch.bat\n本地运行\npush_server.bat\n​\t自动把本地 Hugo 生成网站推送到远程服务器部署\ncreat_post.bat\n省去了用hugo_new建立 新文章的操作\nmailto的用法 1. mailto: 基本用法 mailto: 是一个 URL 协议，用来在网页上创建点击后自动打开默认邮件客户端的新邮件窗口，并自动填入收件人、主题等信息。\n基本语法：\n1 mailto:email@example.com 示例：\n1 \u0026lt;a href=\u0026#34;mailto:chenalna52@gmail.com\u0026#34;\u0026gt;发送邮件\u0026lt;/a\u0026gt; 点击链接后，系统会自动打开默认的邮件客户端，并将 chenalna52@gmail.com 填入收件人字段。\n2. mailto: 高级用法（可带参数） 你还可以附加 subject（主题）、body（邮件内容）、cc、bcc 等参数：\n1 mailto:chenalna52@gmail.com?subject=Hello\u0026amp;body=This%20is%20a%20test 注意：空格和特殊字符需要用 URL 编码（比如空格用 %20）。 多个收件人可以用逗号分隔： 1 mailto:abc@example.com,xyz@example.com Hugo单篇文章分页探究 1. Hugo 的分页概念 在 Hugo 中，分页 (pagination) 通常用于 列表页面，例如：\n博客首页（显示多篇文章的列表） 分类页（显示某个分类下的文章列表） 标签页（显示某个标签下的文章列表） 分页的作用是：如果文章很多，每页只显示一定数量的文章（比如每页 5 篇），然后用户可以通过“上一页/下一页”或页码来浏览其他文章。\n2. 单篇文章内分页 Hugo 不支持单篇文章分页是通过 **`\n** 或 **read more** 来控制文章摘要显示，但这和模板中的 paginator并不一样。 文档中介绍的paginator是{{ .Paginate }}` 语法，用于列表分页，而不是单篇文章内容分页。\nHugo 本质是静态站点生成器，生成的是一组 固定的 HTML 文件，它不会像 PHP 或 Node 这种动态后端根据 ?page=1 之类的参数实时拆分内容。所以即使 URL 上写了 ?page=1、?page=2，如果没有在构建时为每一个参数生成独立的页面文件，浏览器也只会访问到同一个静态文件。\n我之前给出的 ?page= 方案，严格来说只是“伪分页”——\n使用 单篇 Markdown 文件 + \u0026lt;!--pagebreak--\u0026gt; 的方法，带上一页/下一页按钮。\n3. 在 Hugo 中的现实做法 如果你想真正实现一篇文章的分页阅读，通常有以下几种方式：\n1. 拆分为多篇内容文件（最可靠） 例如：\n1 2 3 4 5 content/posts/my-article/ _index.md # 目录页（可以写简介） part1.md part2.md part3.md 每个 partX.md 都是一篇独立文章。 使用列表模板（或自定义导航）实现“上一页/下一页”跳转。 构建后每个 part 都会生成一个独立的 HTML 文件，这才是真分页。 2. 直接写成长文 Hugo 的推荐做法通常是：\n用 目录（Table of Contents） + 锚点跳转 (#section-1) 来组织长文章。 通过 Hugo 的 {{ .TableOfContents }} 自动生成侧边导航，让读者可以快速跳转。 Hugo 的模板查找顺序 Hugo 按照以下优先级查找模板：\n1 2 3 4 5 6 博客根目录/ ├── hugo.yaml ← 在这里配置（会被Hugo优先读取） ├── content/ ├── themes/ │ └── hugo-theme-stack/ │ └── config.yaml ← 这个只是默认模板（优先级低） 不要像作者一样去主题里面改了，改了也没用。\n每一页展示文章数目\n1 2 3 hugo.yaml: pagination: pagerSize: 10 一些问题 'tory' is not recognized as an internal or external command, operable program or batch file. 请输入Slug: 解决方法一： 在两行命令中间加一个空行\n1 2 3 echo 文件存在。 set /p input=请选择: 解决方法二： 给 echo 输出的内容结尾去掉中文字符\n1 2 3 echo 文件存在 set /p input=请选择: identifier是什么？\n在 Hugo Stack 主题里，菜单项的 identifier 并不是 Hugo 官方必须的字段，而是 Stack 主题自己定义用来唯一标识每个菜单项 的属性。\n作用\n唯一标识菜单项 Stack 会根据 identifier 判断菜单项是哪一类（Home / Links / Archives 等），方便主题在侧边栏里显示不同图标或处理逻辑。 和图标绑定 主题里可能会有类似 params.icon 的设置，根据 identifier 自动匹配图标或样式。 weight是什么？\n在 Hugo（以及 Stack 主题）菜单配置里，weight 是用来 控制菜单项在侧边栏或导航栏中的排序顺序 的数字属性。\n规则\n数值越小 → 越靠前显示 可以是正数或负数\nHugo 允许负数权重，负数越小（如 -10）越靠前。 会出现什么情况？ 在 Hugo Stack 主题中，如果你只是想做一个单独的文章，推荐的做法是：直接在 content/page/ 下新建一个 search.md 文件\n⚡ 原因：\ncontent/page/xxx.md 表示一个“单页 (single page)”，它的 URL 自动是 /xxx/，非常适合搜索页、关于页、归档页这类独立页面。 Stack 主题的「Search」就是单页，不需要列表功能，所以 .md 就够了。\n1 2 content/search/_index.md 适用于Section 列表页（文章合集），但搜索不是列表，不需要。 Hugo 如何生成页面 URL Hugo 的规则：\n文件位置 前端 URL content/page/search.md /search/ content/page/travelling.md /travelling/ content/travelling/_index.md /travelling/ content/travelling/some-article.md /travelling/some-article/ 也就是说，URL 的生成与菜单的 url 字段对应，而不是 identifier。\nStack 菜单如何绑定页面 在 Stack 主题里，菜单配置通常在 config.toml 或 config.yaml，示例：\n1 2 3 4 5 6 - identifier: travelling name: 旅行 url: /travelling/ weight: 40 params: icon: map 工作原理 url: /travelling/ → Hugo 会根据这个 URL 去匹配实际页面： 先看 content/page/travelling.md 如果没有，再看 content/travelling/_index.md identifier 只用于 Stack 内部逻辑和图标匹配，不影响 URL。 Hugo 会把对应 URL 的页面渲染到 /travelling/index.html，然后侧边栏点击就跳到这个页面。 Hugo 的 content 目录 = 站点内容源\nSection：一个“内容分组”目录，例如 post/、travelling/。 List Page（列表页）：显示 Section 下文章列表的页面。 Single Page（单页）：显示一篇文章的页面。 Hugo 通过文件名来判断一个内容是 单页 还是 列表页：\n文件名 含义 _index.md 列表页（List Page） index.md 叶子页面（Leaf Bundle Single Page） 其他名字（abc.md） 普通单篇文章（Single Page） 1. content 根目录的例子 content/_index.md\n作用：站点根目录的首页列表页。 URL：/ 内容：可以写首页描述或 Front Matter，例如标题、副标题。 Stack 主题的首页就是通过这里配合 params.mainSections 来渲染文章列表。 content/index.md\n作用：站点根目录的单页。 URL：/ 或主题自定义（大多数主题不这么用）。 因为首页一般用 _index.md，所以很少使用 index.md。 content/abc.md\n作用：根目录下的一篇单独文章。 URL：/abc/ 第二种切换成index.md并没有什么效果，即并不是像abc.md为一篇文章,依然有列出所有文章的功能\n2. content/page 目录 假设目录结构：\n1 2 3 4 5 content/ └─ page/ ├─ _index.md ├─ index.md └─ abc.md 文件 作用 URL page/_index.md page Section 的列表页。如果要在 /page/ 下显示所有子页面的列表，用它。 /page/ page/index.md page 目录本身作为叶子单页（Leaf Bundle）。通常很少用。 /page/（除非主题重写规则） page/abc.md 一个普通单页（例如 About、Links 等）。会在左处出现。 /abc/ 当从index.md切换到_index.md，会报错\n⚡ Stack 主题的「Links / Archives / Search」这类单页通常直接用 abc.md， 因为它们是单独的页面，不需要列表功能。\n3. 新建一个文件夹 solution 1 2 3 4 5 content/ └─ solution/ ├─ _index.md ├─ index.md └─ abc.md 文件 作用 URL solution/_index.md Solution Section 的列表页（显示子文章列表）。 /solution/ solution/index.md Solution 目录自身作为叶子单页。 /solution/ solution/abc.md Solution 下的一篇文章。 /solution/abc/ 常见用途\n如果你想 /solution/ 打开后看到文章列表 → 用 _index.md。 如果你想 /solution/ 打开后只显示一篇独立页面 → 不要 _index.md，而是用 index.md（Leaf Bundle 模式）。 4. post 目录的情况 1 2 3 4 5 content/ └─ post/ ├─ _index.md ├─ index.md └─ abc.md 文件 作用 URL post/_index.md 文章列表页（首页/归档会读取这里的 Section）。 /post/ post/index.md post 整个目录作为一个单页（不常用）。 /post/ post/abc.md 单篇博客文章。 /post/abc/ ⚡ Stack 的首页 content/post/ 下的文章会自动汇总到 /（通过 mainSections）， 但你也可以访问 /post/，它会用 post/_index.md 的配置作为标题/描述。\n第一种情况和第三种情况没有用,依然展示所有文章.\n不要将Solution放在content/page下而是content/下,否则,只是一篇文章\n让文件出现在侧栏 1 2 3 4 5 6 7 8 menu: main: - identifier: solution name: \u0026#34;解答\u0026#34; url: \u0026#34;/solution/\u0026#34; weight: 3 params: icon: bulb 不同语言设置不同的social和侧边栏 将main:menu:放到language下\n如\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 zh-cn: languageName: 中文 title: chenalna weight: 2 params: sidebar: subtitle: .... menu: main: - identifier: solution name: ... url: \u0026#34;/solution/\u0026#34; weight: 3 params: icon: bulb social:.... 问题是，为什么page下的archives/about/links/search，是默认生成的，你在page下添加新的文件夹却不会自动添加到到侧边栏。笔者并不知道如何处理这个问题。\n","date":"2025-09-23T00:00:00Z","permalink":"https://example.com/p/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","title":"遇到的问题"},{"content":"四川省v测试DVD发的\n","date":"2020-09-09T00:00:00Z","permalink":"https://example.com/p/test-chinese/","title":"可选参数"}]