[{"content":"前言 静态博客已成为现代技术博客、个人站点和文档系统的热门选择。\n本文基于Hugo\nHugo优势 生产的性能好。Hugo是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\n无论是Hugo还是Hexo，本质上都是将master文件通过预定好的模板渲染html文件\n环境准备 下载golang\n下载node.js\n安装golang 安装hugo之前，先安装好golang，推荐安装最新版本。\n安装时选择安装目录为 C:\\Users\\sky\\work\\soft\\golang 或者 D:\\sky\\work\\soft\\golang。\n修改环境变量，将 GOPATH 的值修改为 C:\\Users\\sky\\work\\soft\\gopath 或者 D:\\sky\\work\\soft\\gopath（默认为 %USERPROFILE%\\go）。\n安装nodejs/npm 为了使用Google Docsy主题，需要安装nodejs/npm。\n在网站下载nodejs\n安装时选择安装路径为 C:\\Users\\sky\\work\\soft\\nodejs 或者 D:\\sky\\work\\soft\\nodejs。\n安装Hugo 在Hugo Releases页面下载对应操作系统版本的安装包。Hugo官方下载文档 ,如hugo_extended_0.150.0_windows-amd64.zip.下载下来之后，解压缩，将 hugo.exe 文件复制到目录下。\n然后修改环境变量，在 Path 中增加这个路径， 验证安装 $ which hugo 、$ hugo version。\n切记由于 hugo和主题之间版本有依赖关系，因此不同主题选择不同版本\n打开命令提示符，输入hugo version来验证安装是否成功。\nHugo安装完成后的配置工作 设置别名\n为了方便使用，增加 hugo server 命令的 alias 用来本地编辑时的实时预览： vi ~/.zshrc 增加内容：\n1 2 3 4 5 # hugo alias h=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34;\u0026#39; alias h2=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 2323\u0026#39; alias h3=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 3333\u0026#39; alias h4=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 4343\u0026#39; hugo命令行参数说明：\n-D: 等同\u0026ndash;buildDrafts，标记为 Draft 的内容也会一起构建，方便在本地编写和预览新的暂时未发布的内容。\n-F: 等同\u0026ndash;buildFuture，发布时间为\u0026quot;未来\u0026quot;(即时间比当前时间还要晚)内容也会一起构建，方便在本地编写和预览新的暂时未发布的内容。 \u0026ndash;disableFastRender：当内容修改时，进行完整的重新构建，避免预览的内容不够新 h2/h3/h4 指定了不同的端口，当需要在本地打开多个时，可以使用固定端口而不是随机端口。\n设置代理 npm代理 主要是 npm 命令需要代理才能顺利下载文件，比如:安装 PostCSS 要构建或更新站点的 CSS 资源，您还需要PostCSS创建最终资产。\n如果您需要安装它，您必须在您的机器上安装最新版本的NodeJS，以便您可以使用npmNode 包管理器。\n默认情况npm下，在您运行的目录下安装工具\n1 2 3 4 npm install： npm install -D autoprefixer npm install -D postcss-cli npm install -D --save autoprefixer 如果发生报错，并且查看到如下的错误信息\n1 2 3 4 5 6 7 8 path /home/sky/work/code/learning/docsy/\u0026gt;node_modules/hugo-extended command failed command sh -c node postinstall.js ✖ Hugo installation failed. : node:internal/process/promises:391 triggerUncaughtException(err, true /\u0026gt;*fromPromise*/); ^ RequestError: getaddrinfo ENOTFOUND github.com 解决方式：\n1 2 3 npm config set registry \u0026lt;https://registry.npmmirror.com\u0026gt; npm config set proxy \u0026lt;http://192.168.2.1:7890\u0026gt; npm config set https-proxy \u0026lt;http://192.168.2.1:7890\u0026gt; 如果遇到报错信息：\n1 2 Failed to connect to github.com port 443 after 21045 ms Could not connect to server 注意修改成自己的IP和端口号\n1 2 git config --global http.proxy \u0026lt;http://127.0.0.1:7890\u0026gt; git config --global https.proxy \u0026lt;http://127.0.0.1:7890\u0026gt; 站点骨架 每个 Hugo 项目都是一个目录，其中的子目录贡献于站点的内容、结构、行为和呈现。\n在创建新站点时，Hugo 会生成一个项目骨架。例如，以下命令：\n利用hugo new site myblog(此时需要用到hugo.exe,假设存放在bin下),会在bin下生成myblog\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 myblog/ ├── archetypes #新建内容的模板（原型），方便统一管理文章格式，用于新建内容时自动填充默认 Front Matter │ └── `default.md` |--assests #目录包含通常通过资源管道传递的全局资源。包括图片、CSS、Sass、JavaScript 和 TypeScript 等资源。 ├── hugo.toml # 博客站点的配置文件 ├── content # 博客文章所在目录.目录包含组成站点内容的标记文件（通常是 markdown）和页面资源 ├── data #目录包含用于增强内容、配置、本地化和导航的数据文件（JSON、TOML、YAML 或 XML），供模板调用 |----i18n #目录包含多语言站点的翻译表。 ├── layouts # 自定义网站布局。目录包含将内容、数据和资源转换为完整网站的模板。决定网站的外观和布局。主题通常也会提供一套layouts，当你用自定义（不使用主题）时候可以在此覆盖主题默认模板。（hugo 初始化的layouts并不包含任何主题） ├── static # 一些静态内容，目录包含在构建站点时将复制到 public 目录的文件，例如 .ico、.txt 和用于验证站点拥有权的文件。在引入 页面包 和 资源管道之前，static 目录也用于存放图片、CSS 和 JavaScript 等资源 └── themes # 博客主题， 目录包含一个或多个主题，每个主题位于自己的子目录中。包含自己的layouts、static、配置文件等。启用主题后，Hugo首先会从主题中加载布局文件，再加载站点内自定义的覆盖文件 根据需要，可以将站点配置组织到子目录中： |---config/ #目录包含站点配置，可能分为多个子目录和文件。对于配置较少或不需要在不同环境中以不同方式运行的项目，项目根目录中的单个 hugo.toml 配置文件就足够了。 |___ _default/ |_____config.toml #全局配置文件 config.toml\nHugo的全局配置文件，用于定义站点的基本信息、URL、语言、主题、菜单等。也可以使用config.yaml/config.json\ncontent/\n​\t存放所有博客文章和页面。每个markdown文件的Front matter中定义标题、日期、草稿状态、标签与分类等信息。\n​\t示例文件：\ntitle:\u0026quot;我的第一篇文章\u0026quot; date:2024-03-21 draft:false tags:[\u0026quot;入门\u0026quot;、“Hugo”] categories:[“技术博客”] 这里是文章内容 archtypes/ ​\t定义新建内容时所用的模板（原型），方便统一管理文章格式。你可以自定义默认模板以满足特定格式要求\nlayouts/\n存放网站页面模板文件，决定网站的外观和布局。主题通常也会提供一套layouts，当你需要自定义时可以自此覆盖主题默认模板\nstatic/\n内容所有不会经过Hugo处理的静态文件，如图片、CSS文件、JS文件等。生成网站时，这些文件会直接复制到输出目录。\nthemes/\n存放第三方主题，每个主题通常都包含自己的layouts、static、配置文件等。启用主题后，Hugo会先从主题中加载布局文件，再加载站点内自定义的覆盖文件。\n利用Hugo命令构建站点时，Hugo 会创建一个 public 目录，目录包含发布的网站，在运行 hugo 命令时生成。Hugo 根据需要重建此目录及其内容。 通常还会创建一个 resources 目录：目录包含 Hugo 资源管道的缓存输出，在运行 hugo 或 hugo server 命令时生成。默认情况下，此缓存目录包括 CSS 和图片。Hugo 根据需要重建此目录及其内容。 Hugo 创建了一个联合文件系统，允许将两个或多个目录挂载到同一位置。例如，假设您的主目录包含一个 Hugo 项目的目录，另一个目录包含共享内容。您可以使用挂载（mounts）在构建站点时包含共享内容。 在站点配置中当两个或多个文件具有相同路径时，优先级顺序遵循挂载的顺序。例如，如果共享内容目录包含 books/book-1.md，则会被忽略，因为项目的 content 目录先被挂载。 将archetypes/default.md,\u0026quot;+\u0026ldquo;改成\u0026rdquo;-\u0026quot;,\u0026quot;=\u0026ldquo;改成\u0026rdquo;+\u0026quot;，因为这个时toml格式的，我们要改成yaml格式 配置主题 下载主题 ​\t以Stack为例，下载发布页面.把解压好的主题放在themes下，并把后面的版本号如3.3.10去掉\n​\t或者将存储库克隆到 themes/hugo-theme-stack\n​\tgit clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack\n​\t或者如果您已经在您的网站中使用 Git，则可以通过在 Hugo 网站的根目录中运行以下命令将主题添加为子模块：\n​\tgit submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack\n把子模块的hugo-theme-stack里的layouts复制出来，复制到myblog下的layouts\n在hugo-theme-stack里examplesite里面的content和hugo.yaml,复制到myblog 下，然后把原来的hugo.toml删掉\n1 2 3 4 5 6 7 示例 baseurl: https://example.com/ languageCode: en-us theme: hugo-theme-stack#指定主题 title: Example Site copyright: Example Person DefaultContentLanguage: zh-cn# 默认语言 然后在终端执行hugo，进行构建（如果有一些我们没有，删除content下post的内容，只留下chinese-test）\n同一个文件可以通过多个markdown，后缀名不同来实现。默认的index就是默认的名字 zh-cn# 默认语言，默认的主题下的名字。如果。即content/post/chinese-test下的 index-zh-cn.md可以通过index-zh-cn来改变在中文界面i显示。index-en会在英文界面下显示。\n​\t这个里面有cataglories分类和用来打tags archetypes/default.md\n​\t文章模板 draft改成false，否则不会显示\n如何快速创建一个文章？hugo new potst/test/index.md,就生成了test/index.md,将draft:true改成draft:false（此时是在content/post下）\n1 2 3 4 5 6 7 8 9 10 11 title: Chinese Test description: 这是一个副标题 date: 2020-09-09 slug: test-chinese image: helena-hertz-wWZzXlDpMog-unsplash.jpg categories: - Test - 测试 - HLE tags: - lf 常用命令 命令 说明 hugo new post/test/index.md 创建新文章。新建文章后，Hugo会在content/post目录下生成一份Markdown文件，并根据archetypes中的模板填充默认Front Matter hugo server -D 启动本地服务器预览，使用-D参数可包含草稿内容进行预览 hugo 构建站点（生成静态文件到public/目录） hugo \u0026ndash;cleanDestinationDir 清理构建文件并重新生成 hugo \u0026ndash;minify 构建并压缩HTML/CSS/JS文件（适合生产部署） hugo new site [path] 创建一个新站点 hugo server 启动本地服务器预览 hugo config 显示站点配置信息 hugo list drafts 列出所有处于草稿状态的文章 常用参数\n-D ,\u0026ndash;buildDrafts:包括草稿文章 -F，\u0026ndash;buildFuture:包括未来发布的文章 -E，\u0026ndash;buildExpired：包括已过期的文章 \u0026ndash;minify:生成时压缩输出文件 \u0026ndash;gc:构建时运行垃圾回收 404 Page Not Found 注意，一旦网站可以建立，那么除非你做一个新的文件，否则就一直404\nhugo server \u0026ndash;theme=your_theme_name(echo \u0026ldquo;theme = \u0026lsquo;ananke\u0026rsquo;\u0026rdquo; \u0026raquo; hugo.toml)，这个相当于向hugo.toml添加theme 删去 hugo.toml,保留config.toml 推荐：在 config.toml 中写 theme = \u0026quot;your_theme_name\u0026quot;\n临时：命令行 hugo server --theme=your_theme_name\n如果需要更多,如配置favicon，评论区，参考建站技术 | 使用 Hugo + Stack 简单搭建一个博客\nGithub推送自动化 在使用 GitHub Pages 构建并托管博客时，我们面临一个常见问题：如何在保持源码安全的同时，将构建好\n的 public 文件用于页面展示。直接丢上去的往往是public文件。为了解决这一问题，我们可以通过创建两个 GitHub 仓库来实现不同用途的分离和自动化管理。\n源码仓库（source_blog） 用于存储博客相关的源码， 包括markdown文件、配置信息等未构建的内容 设置为Private仓库 展示仓库（blog_show) 用于存储构建后的文件（如public文件夹），供Github Pages或其他托管服务使用 设为Public仓库，确保可以正常访问页面 自动化流程 利用Github Actions或脚本实现如下自动化：\n在源码仓库更新时触发构建操作，生成博客所需的静态文件。将生成的文件自动推送到展示仓库，无需手动干预。\nSettings-\u0026gt;Developer Settings-\u0026gt;Personal access tokens -\u0026gt; Tokens(classic),勾选repo和workflow，过期时间选择永远不过期。generate token，然后复制生成的token。\n点开source_blog,Security-Secrets and variables-Actions-Repository secrets-New repository secret,填写2中生成的token。\n修改自动化代码(deploy.yml)，将修改分支改成master。将.github_hugo移到blog下，并且去掉_hugo,作为部署文件\ngit init 创建.git 文件\nEXTERNAL_REPOSITORY:xx/blog_show，展示的博客\n​\tblow_show里所展示的就是public里面的内容\nblow_show\u0026gt;Settings\u0026gt;Pages\u0026gt;Build and delployment，改成 master 和root 你可以在根目录创建一个批处理脚本，用来快速启动本地服务器并使用 chrome 打开网页。\n1 2 3 4 5 6 本地运行.bat @echo off echo [本地运行] start chrome http://localhost:1313/ #默认开放1313端口 hugo server pause 使用Netlify Add new project → import an existing project→选择blog_show\nTypora +PicGo 图床配置 下载PicGo\n创建一个新的仓库如blog_picture 设置为公开博客图片\n再次重复操作,生成一个blog_show,然后在PicGo里填写对应Token.\n这样子就可以通过PicGo上传了。\n但是我不想每次都得要先通过PicGo上传至Github，然后将链接如（https://raw.githubusercontent.com/S1-19027/blog_picture/master/image-20250925115857370.png）再复制到Markdown里的链接语法。\n我希望截图后就可以直接上传至github\n在Typora中：\n指定一下图形设置的上传服务设定\n插入图片时选择上传图片。\n阿里云图床,开通OSS教程：参考文献1、参考文献2\n注：阿里云的99元/年云服务器似乎不太行，还是老实买点2核4Gib的\n华为云相比较太贵了，更多的我也懒得去找了。\n使用云服务器 1 2 3 │ A new version (/tmp/tmp.QB1PQknVLa) of configuration file /etc/ssh/sshd_config is available, but the version installed currently has been locally modified. │ │ What do you want to do about modified configuration file sshd_config? 选择Install the package maintainer's version即可\n利用Nginx即可\n参考 hexo与hugo博客搭建与github自动化推送和服务器推送 Stack官方文档 ","date":"2025-09-23T00:00:00Z","permalink":"https://example.com/p/hugo--stack-%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/","title":"Hugo + Stack 简单搭建一个静态博客"}]