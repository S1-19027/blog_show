[{"content":"前言 静态博客已成为现代技术博客、个人站点和文档系统的热门选择。\n本文基于Hugo\nHugo优势 生产的性能好 本质上都是讲master文件通过预定好的特质转成html文件\n环境准备 下载node.js 下载golang 安装golang 安装hugo之前，先安装好golang，推荐安装最新版本。\n安装时选择安装目录为 C:\\Users\\sky\\work\\soft\\golang 或者 D:\\sky\\work\\soft\\golang。\n修改环境变量，将 GOPATH 的值修改为 C:\\Users\\sky\\work\\soft\\gopath 或者 D:\\sky\\work\\soft\\gopath（默认为 %USERPROFILE%\\go）。\n安装nodejs/npm 为了使用Google Docsy主题，需要安装nodejs/npm。\n在网站下载nodejs\n安装时选择安装路径为 C:\\Users\\sky\\work\\soft\\nodejs 或者 D:\\sky\\work\\soft\\nodejs。\n安装Hugo 在Hugo Releases页面下载对应操作系统版本的安装包。Hugo官方下载文档 ,如hugo_extended_0.150.0_windows-amd64.zip.下载下来之后，解压缩，将 hugo.exe 文件复制到目录下。\n然后修改环境变量，在 Path 中增加这个路径， 验证安装 $ which hugo 、$ hugo version。\n切记由于 hugo和主题之间版本有依赖关系，因此不同主题选择不同版本\n打开命令提示符，输入hugo version来验证安装是否成功。\nHugo安装完成后的配置工作 设置别名 为了方便使用，增加 hugo server 命令的 alias 用来本地编辑时的实时预览： vi ~/.zshrc 增加内容：\n1 2 3 4 5 # hugo alias h=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34;\u0026#39; alias h2=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 2323\u0026#39; alias h3=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 3333\u0026#39; alias h4=\u0026#39;hugo -D -F server --disableFastRender --bind \u0026#34;0.0.0.0\u0026#34; --port 4343\u0026#39; hugo命令行参数说明：\n-D: 等同\u0026ndash;buildDrafts，标记为 Draft 的内容也会一起构建，方便在本地编写和预览新的暂时未发布的内容。\n-F: 等同\u0026ndash;buildFuture，发布时间为\u0026quot;未来\u0026quot;(即时间比当前时间还要晚)内容也会一起构建，方便在本地编写和预览新的暂时未发布的内容。 \u0026ndash;disableFastRender：当内容修改时，进行完整的重新构建，避免预览的内容不够新 h2/h3/h4 指定了不同的端口，当需要在本地打开多个时，可以使用固定端口而不是随机端口。\n设置代理 npm代理 主要是 npm 命令需要代理才能顺利下载文件，比如:安装 PostCSS 要构建或更新站点的 CSS 资源，您还需要PostCSS创建最终资产。如果您需要安装它，您必须在您的机器上安装最新版本的NodeJS，以便您可以使用npmNode 包管理器。默认情况npm下，在您运行的目录下安\u0026gt;装工具npm install： npm install -D autoprefixer `npm install -D postcss-cli npm install -D \u0026ndash;save autoprefixer 如果发生报错，并且查看到如下的错误信息\n1 2 3 4 5 6 7 8 path /home/sky/work/code/learning/docsy/\u0026gt;node_modules/hugo-extended command failed command sh -c node postinstall.js ✖ Hugo installation failed. : node:internal/process/promises:391 triggerUncaughtException(err, true /\u0026gt;*fromPromise*/); ^ RequestError: getaddrinfo ENOTFOUND github.com 1 2 3 npm config set registry \u0026lt;https://registry.npmmirror.com\u0026gt; npm config set proxy \u0026lt;http://192.168.2.1:7890\u0026gt; npm config set https-proxy \u0026lt;http://192.168.2.1:7890\u0026gt; 如果遇到报错信息： Failed to connect to github.com port 443 after 21045 m connect to github.com port 443 after 21045 ms: Could not \u0026gt;connect to server 注意修改成自己的IP和端口号\n1 2 git config --global http.proxy \u0026lt;http://127.0.0.1:7890\u0026gt; git config --global https.proxy \u0026lt;http://127.0.0.1:7890\u0026gt; 站点骨架 每个 Hugo 项目都是一个目录，其中的子目录贡献于站点的内容、结构、行为和呈现。\n在创建新站点时，Hugo 会生成一个项目骨架。例如，以下命令：\n利用hugo new site myblog(此时需要用到hugo.exe,假设存放在bin下),会在bin下生成myblog\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 myblog/ ├── archetypes #新建内容的模板（原型），方便统一管理文章格式，用于新建内容时自动填充默认 Front Matter │ └── `default.md` |--assests #目录包含通常通过资源管道传递的全局资源。包括图片、CSS、Sass、JavaScript 和 TypeScript 等资源。 ├── hugo.toml # 博客站点的配置文件 ├── content # 博客文章所在目录.目录包含组成站点内容的标记文件（通常是 markdown）和页面资源 ├── data #目录包含用于增强内容、配置、本地化和导航的数据文件（JSON、TOML、YAML 或 XML），供模板调用 |----i18n #目录包含多语言站点的翻译表。 ├── layouts # 自定义网站布局。目录包含将内容、数据和资源转换为完整网站的模板。决定网站的外观和布局。主题通常也会提供一套layouts，当你用自定义（不使用主题）时候可以在此覆盖主题默认模板。（hugo 初始化的layouts并不包含任何主题） ├── static # 一些静态内容，目录包含在构建站点时将复制到 public 目录的文件，例如 .ico、.txt 和用于验证站点拥有权的文件。在引入 页面包 和 资源管道之前，static 目录也用于存放图片、CSS 和 JavaScript 等资源 └── themes # 博客主题， 目录包含一个或多个主题，每个主题位于自己的子目录中。包含自己的layouts、static、配置文件等。启用主题后，Hugo首先会从主题中加载布局文件，再加载站点内自定义的覆盖文件 根据需要，可以将站点配置组织到子目录中： |---config/ #目录包含站点配置，可能分为多个子目录和文件。对于配置较少或不需要在不同环境中以不同方式运行的项目，项目根目录中的单个 hugo.toml 配置文件就足够了。 |___ _default/ |_____config.toml #全局配置文件 config.toml\nHugo的全局配置文件，用于定义站点的基本信息、URL、语言、主题、菜单等。也可以使用config.yaml/config.json\ncontent/\n​\t存放所有博客文章和页面。每个markdown文件的Front matter中定义标题、日期、草稿状态、标签与分类等信息。\n​\t实例文件：\ntitle:\u0026quot;我的第一篇文章\u0026quot; date:2024-03-21 draft:false tags:[\u0026quot;入门\u0026quot;、“Hugo”] categories:[“技术博客”] 这里是文章内容 archtypes/ ​\t定义新建内容时所用的模板（原型），方便统一管理文章格式。你可以自定义默认模板以满足特定格式要求\nlayouts/\n存放网站页面模板文件，决定网站的外观和布局。主题通常也会提供一套layouts，当你需要自定义时可以自此覆盖主题默认模板\nstatic/\n内容所有不会经过Hugo处理的静态文件，如图片、CSS文件、JS文件等。生成网站时，这些文件会直接复制到输出目录。\nthemes/\n存放第三方主题，每个主题通常都包含自己的layouts、static、配置文件等。启用主题后，Hugo会先从主题中加载布局文件，再加载站点内自定义的覆盖文件。\n利用Hugo命令构建站点时，Hugo 会创建一个 public 目录，目录包含发布的网站，在运行 hugo 命令时生成。Hugo 根据需要重建此目录及其内容。 通常还会创建一个 resources 目录：目录包含 Hugo 资源管道的缓存输出，在运行 hugo 或 hugo server 命令时生成。默认情况下，此缓存目录包括 CSS 和图片。Hugo 根据需要重建此目录及其内容 Hugo 创建了一个联合文件系统，允许将两个或多个目录挂载到同一位置。例如，假设您的主目录包含一个 Hugo 项目的目录，另一个目录包含共享内容.您可以使用挂载（mounts）在构建站点时包含共享内容。在站点配置中 当两个或多个文件具有相同路径时，优先级顺序遵循挂载的顺序。例如，如果共享内容目录包含 books/book-1.md，则会被忽略，因为项目的 content 目录先被挂载。 将archetypes/default.md,\u0026quot;+\u0026ldquo;改成\u0026rdquo;-\u0026quot;,\u0026quot;=\u0026ldquo;改成\u0026rdquo;+\u0026quot;，因为这个时toml格式的，我们要改成yaml格式 配置主题 下载主题 ​\t以Stack为例，下载发布页面.把解压好的主题放在themes下，并把后面的版本号如3.3.10去掉\n​\t或者将存储库克隆到 themes/hugo-theme-stack\n​\tgit clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack\n​\t或者如果您已经在您的网站中使用 Git，则可以通过在 Hugo 网站的根目录中运行以下命令将主题添加为子模块：\n​\tgit submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack\n把子模块的hugo-theme-stack里的layouts复制出来，复制到myblog下的layouts\n在hugo-theme-stack里examplesite里面的content和hugo.yaml,复制到myblog 下，然后把原来的hugo.toml删掉\n1 2 3 4 5 6 7 示例 baseurl: https://example.com/ languageCode: en-us theme: hugo-theme-stack#指定主题 title: Example Site copyright: Example Person DefaultContentLanguage: zh-cn# 默认语言 然后在终端执行hugo，进行构建（如果有一些我们没有，删除content下post的内容，只留下chinese-test）\n同一个文件可以通过多个markdown，后缀名不同来实现。默认的index就是默认的名字 zh-cn# 默认语言，默认的主题下的名字。如果。即content/post/chinese-test下的 index-zh-cn.md可以通过index-zh-cn来改变在中文界面i显示。index-en会在英文界面下显示。\n​\t这个里面有cataglories分类和用来打tags archetypes/default.md\n​\t文章模板 draft改成false，否则不会显示\n如何快速创建一个文章？hugo new potst/test/index.md,就生成了test/index.md,将draft:true改成draft:false（此时是在content/post下）\n1 2 3 4 5 6 7 8 9 10 11 title: Chinese Test description: 这是一个副标题 date: 2020-09-09 slug: test-chinese image: helena-hertz-wWZzXlDpMog-unsplash.jpg categories: - Test - 测试 - HLE tags: - lf 常用命令 命令 说明 hugo new post/test/index.md 创建新文章。新建文章后，Hugo会在content/post目录下生成一份Markdown文件，并根据archetypes中的模板填充默认Front Matter hugo server -D 启动本地服务器预览，使用-D参数可包含草稿内容进行预览 hugo 构建站点（生成静态文件到public/目录） hugo \u0026ndash;cleanDestinationDir 清理构建文件并重新生成 hugo \u0026ndash;minify 构建并压缩HTML/CSS/JS文件（适合生产部署） hugo new site [path] 创建一个新站点 hugo server 启动本地服务器预览 hugo config 显示站点配置信息 hugo list drafts 列出所有处于草稿状态的文章 常用参数\n-D ,\u0026ndash;buildDrafts:包括草稿文章 -F，\u0026ndash;buildFuture:包括未来发布的文章 -E，\u0026ndash;buildExpired：包括已过期的文章 \u0026ndash;minify:生成时压缩输出文件 \u0026ndash;gc:构建时运行垃圾回收 主题骨架 创建新主题时，Hugo 会生成一个可用的主题骨架。例如，以下命令： hugo new theme my-theme 会创建以下目录结构(省略了子目录):\n1 2 3 4 5 6 7 8 9 10 11 12 ` my-theme/ ├── archetypes/ ├── assets/ ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ ├── LICENSE ├── `README.md` ├── hugo.toml └── theme.toml 使用上述描述的联合文件系统，Hugo 将每个目录挂载到项目的相应位置。当两个文件路径相同时，项目目录中的文件优先。这样，例如，您可以通过在项目目录相同位置放置一个副本来覆盖主题的模板。\n使用git命令下载主题 在myblog 目录下使用git 命令来下载主题hugo-theme-bootstrap4-blog： git clone \u0026lt;https://github.com/alanorth/hugo-theme-bootstrap4-blog.git\u0026gt; themes/hugo-theme-bootstrap4-blog 下载下来的主题会放在themes 目录中： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 └── hugo-theme-bootstrap4-blog ├── CHANGELOG.md ├── LICENSE.txt ├── README.md ├── archetypes ├── assets ├── exampleSite # 本主题示例内容 | ├── content # 示例博客文章 │ |-- static │ |-- config.toml # 本主题配置 ├── i18n ├── images ├── layouts ├── package-lock.json ├── package.json ├── screenshot.png ├── source ├── theme.toml └── webpack.config.js 使用主题 我们将exampleSite 目录中的内容，复制到博客根目录myblog 中，在myblog 目录中执行命令： cp themes/hugo-theme-bootstrap4-blog/exampleSite/* ./ -r 删除旧的hugo.toml (存疑将archetypes/default.md,\u0026quot;+\u0026ldquo;改成\u0026rdquo;-\u0026quot;,\u0026quot;=\u0026ldquo;改成\u0026rdquo;+\u0026quot;，因为这个时toml格式的，我们要改成yaml格式) 启动博客服务 使用下面命令启动服务： \u0026gt;\u0026gt;\u0026gt; hugo server Page Not Found 注意，一旦网站可以建立，那么除非你做一个新的文件，否则就一直404\nhugo server \u0026ndash;theme=your_theme_name(echo \u0026ldquo;theme = \u0026lsquo;ananke\u0026rsquo;\u0026rdquo; \u0026raquo; hugo.toml)，这个相当于向hugo.toml添加theme 删去 hugo.toml,保留config.toml 遇到错误 子模块可能没有被正确初始化，或者 .gitmodules 文件中的配置与实际的子模块路径不匹配. 1 2 3 /usr/bin/git -c protocol.version=2 submodule update --init --force Error: fatal: No url found for submodule path \u0026#39;themes/hugo-theme-bootstrap4-blog\u0026#39; in .gitmodules Error: The process \u0026#39;/usr/bin/git\u0026#39; failed with exit code 128 ​\t解决方法：添加子模块 git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke.\n1 2 3 4 ERROR deprecated: .Site.Social was deprecated in Hugo v0.124.0 and subsequently removed. Implement taxonomy \u0026#39;social\u0026#39; or use .Site.Params.Social instead. ERROR deprecated: .Site.Authors was deprecated in Hugo v0.124.0 and subsequently removed. Implement taxonomy \u0026#39;authors\u0026#39; or use .Site.Params.Author instead. ​\t解决方法 如报错信息，找到对应并替换即可\nrange can't iterate over Your Name Hugo 提示 range can\u0026rsquo;t iterate over Your Name，这意味着你在模板中尝试使用 range 迭代一个字符串（Your Name）， 而 range 只能用于迭代数组、切片或映射（map），不能用于迭代单个字符串。\n你的.Site.Params.Author配置在config.toml里是：\n1 2 [params] author = \u0026#34;Your Name\u0026#34; executing \u0026quot;partials/twitter_cards.html\u0026quot; at \u0026lt;.twitter\u0026gt;: can't evaluate field twitter in type interface {}\n模板 partials/twitter_cards.html 里面，有类似这样的代码：\n1 2 3 {{ range .Site.Params.Author }} {{ .twitter }} {{ end }} 这段代码假设 Author 是一个数组或对象，每个元素都有 twitter 字段。\n但你提供的是字符串 \u0026quot;Your Name\u0026quot;，模板自然找不到 .twitter 字段 → 报错。\n方法 1：修改 config.toml 中的 author 配置 将 author 配置为一个对象或数组，而不是字符串。例如：\n1 2 3 4 5 6 7 [params] [params.author] author = \u0026#34;Your Name\u0026#34; twitter = \u0026#34;your_twitter\u0026#34; 如果你需要迭代多个作者，可以将 author 配置为一个数组：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 [params] [[params.author]] name = \u0026#34;Author 1\u0026#34; twitter = \u0026#34;author1_twitter\u0026#34; [[params.author]] name = \u0026#34;Author 2\u0026#34; twitter = \u0026#34;author2_twitter . 方法2：如果 author 必须是一个字符串（例如 author = \u0026ldquo;Your Name\u0026rdquo;），你需要修改模板文件，避免使用 range 迭代 .Site.Params.Author。 例如，将 twitter_cards.html 中的代码：\n1 2 3 4 5 {{ range .Site.Params.Author }} {{ .twitter }} {{ end }} 改为： {{ .Site.Params.Author }}\n方法 3：调试模板\n在 twitter_cards.html 中打印上下文，看看实际传入了什么：\n1 {{ printf \u0026#34;%#v\u0026#34; . }} 可以快速发现传入的上下文是否有 twitter 字段。 用于排查问题，非常有用。 方法 4：临时禁用 Twitter 卡片\n如果不需要 Twitter 卡片，可以在 head-meta.html 注释掉调用：\n1 {{/* {{ partial \u0026#34;twitter_cards.html\u0026#34; . }} */}} 避免报错，让网站能正常生成。 适合快速排查或暂时不需要社交卡片功能。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 $ hugo bash: line 1: hugo: command not found \u0026#34;build.command\u0026#34; failed ──────────────────────────────────────────────────────────────── Error message Command failed with exit code 127: hugo (https://ntl.fyi/exit-code-127) Error location In Build command from Netlify app: hugo Resolved config build: command: hugo commandOrigin: ui publish: /opt/build/repo/public publishOrigin: ui Build failed due to a user error: Build script returned non-zero exit code: 2 Failing build: Failed to build site Finished processing build request in 16.127s 这个错误表明在你的构建环境中，hugo 命令未找到。hugo 是一个用于生成静态网站的工具，而你的构建系统（这里是 Netlify）无法找到它。 解决方法：在 Netlify UI 中设置 Hugo 版本 如果你不想使用 netlify.toml 文件，可以通过 Netlify 的 UI 设置 Hugo 版本：\n登录 Netlify 并进入你的项目。\n导航到 Site settings \u0026gt; Build \u0026amp; deploy \u0026gt; Environment \u0026gt; Environment variables。\n添加一个环境变量：\nKey: HUGO_VERSION\nValue: 0.120.4（替换为你需要的 Hugo 版本）。\n保存并重新触发构建。\nDocsy主题 Docsy 是一个基于 Hugo 的主题，专门用于构建技术文档集。以下是一般 Docsy 项目的基本目录结构：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 . ├── archetypes # 自定义模板定义 ├── assets # 存放静态资源，如样式表、JavaScript 和图片 │ ├── css # 主题和站点的自定义 CSS │ └── ... ├── content # 网站内容，包括页面和博客文章 │ ├── _index.md # 主页内容 │ ├── docs # 文档区域 │ │ └──_index.md # 文档首页 │ ├── blog # 博客文章 │ └── ... ├── data # YAML 数据文件，可用于自定义站点变量或数据 ├── layouts # 自定义布局文件 ├── static # 非 Hugo 处理的静态资源，将被直接复制到生成的站点中 ├── themes # 包含 Docsy 主题的子目录 项目的启动文件介绍 在 Docsy 项目中，主要的启动文件是 config.toml 或 config.yaml（取决于你的偏好）。这些配置文件位于项目根目录下，用来设置网站的基本参数、导航菜单、多语言支持等。\n例如，一个简单的 config.toml 文件可能如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #Hugo 属性设置 title = \u0026#34;我的文档站点\u0026#34; #网站地址 baseURL = \u0026#34;https://example.com/\u0026#34; #网站语言 languageCode = \u0026#34;en-us\u0026#34; # 网站title title = \u0026#34;我的博客\u0026#34; # 主题的名字，这个要跟myblog/themes 目录中的子目录的目录名一致 theme = \u0026#34;hugo-theme-bootstrap4-blog\u0026#34; # home/category/tag 页面显示的文章数 (Default: 10) paginate = 5 # home/category/tag 页面用于摘要的字数 (Default: 70) summaryLength = 50 # optionally override the site\u0026#39;s footer with custom copyright text # copyright = \u0026#34;Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).\u0026#34; #googleAnalytics = \u0026#34;UA-123-45\u0026#34; #disqusShortname = \u0026#34;XYW\u0026#34; # 博客链接的路径格式 [permalinks] posts = \u0026#34;/:year/:month/:title/\u0026#34; page = \u0026#34;/:slug/\u0026#34; 顶部栏 [[menu.main]] name = \u0026#34;首页\u0026#34; weight = 1 identifier = \u0026#34;home\u0026#34; url = \u0026#34;/\u0026#34; 侧边栏 [[menu.main]] name = \u0026#34;文档\u0026#34; weight = 2 identifier = \u0026#34;docs\u0026#34; url = \u0026#34;/docs/\u0026#34; #Theme 属性设置 # [params] # Site author author = \u0026#34;Your Name\u0026#34; # Description/subtitle for homepage (can be Markdown) description = \u0026#34;A simple Hugo theme based on the Bootstrap v4 blog example.\u0026#34; # Show header (default: true) #header_visible = true # Format dates with Go\u0026#39;s time formatting date_format = \u0026#34;Mon Jan 02, 2006\u0026#34; # verification string for Google Webmaster Tools #google_verify_meta = \u0026#34;BAi57DROASu4b2mkVNA_EyUsobfA7Mq8BmSg7Rn-Zp9\u0026#34; # verification string for Bing Webmaster Tools #bing_verify_meta = \u0026#34;3DA353059F945D1AA256B1CD8A3DA847\u0026#34; # verification string for Yandex Webmaster Tools #yandex_verify_meta = \u0026#34;66b077430f35f04a\u0026#34; # Optionally display a message about the site\u0026#39;s use of cookies, which may be # required for your site in the European Union. Set the parameter below to a # page where the user can get more information about cookies, either on your # site or externally, for example: #cookie_consent_info_url = \u0026#34;/cookie-information/\u0026#34; #cookie_consent_info_url = \u0026#34;http://cookiesandyou.com\u0026#34; # show sharing icons on pages/posts (default: true) #sharingicons = true # Display post summaries instead of content in list templates (default: true) #truncate = true # Disable the use of sub-resource integrity on CSS/JS assets (default: false) # Useful if you\u0026#39;re using a CDN or other host where you can\u0026#39;t control cache headers #disable_sri = false [params.sidebar] # Optional about block for sidebar (can be Markdown) about = \u0026#34;A simple Hugo theme based on the [Bootstrap v4 blog example](http://v4-alpha.getbootstrap.com/examples/blog/).\u0026#34; # How many posts to show on the sidebar (Default: 5) #num_recent_posts = 2 [params.social] # Optional, used for attribution in Twitter cards (ideally not a person # for example: nytimes, flickr, NatGeo, etc). # See: https://dev.twitter.com/cards/types/summary-large-image twitter = \u0026#34;username\u0026#34; # Default content language for Hugo 0.17\u0026#39;s multilingual support (default is \u0026#34;en\u0026#34;) # See: https://github.com/spf13/hugo/blob/master/docs/content/content/multilingual.md #DefaultContentLanguage = \u0026#34;en\u0026#34; # Languages to render #[languages.en] #[languages.bg] # Bulgarian date format is dd.mm.yyyy #date_format = \u0026#34;02.01.2006\u0026#34; # vim: ts=2 sw=2 et 在这个例子中，我们设置了网站的标题、基础 URL 和语言代码，以及两个主菜单项（首页和文档）。\n项目的配置文件介绍 config.toml/config.yaml 这是整个站点的核心配置文件，你可以在这里设定站点的基本信息、导航菜单、元数据参数、多语言支持等。 _config.yaml in /themes/docsy 尽管这不是项目本身的配置文件，但 Docsy 主题也有自己的_config.yaml。这个文件包含了 Docsy 提供的默认配置，可以在项目中的 config.toml/config.yaml 中覆盖或扩展。 .hugorc （可选） 如果你选择使用 JSON 格式的配置，可以创建一个 .hugorc 文件来存储配置。它的工作方式与 config.toml 类似。 archetypes 目录 此目录下的文件定义了创建新页面时的默认内容结构。例如，你可以创建一个 doc.md 文件作为文档页面的模板。 static 和 assets 目录 这两个目录分别存放静态文件和处理过的静态资源。static 直接包含要复制到生成站点的内容，而 assets 内的文件会经过诸如 Sass 编译等预处理器处理。 以上就是 Docsy 主题的基本介绍和使用指南。更多详细信息和高级配置，请参考 Docsy 的官方文档。\n安装hexo npm install -g hexo-cli\nGithub推送自动化 在使用 GitHub Pages 构建并托管博客时，我们面临一个常见问题：如何在保持源码安全的同时，将构建好\n的 public 文件用于页面展示。直接丢上去的往往是public文件。为了解决这一问题，我们可以通过创建两个 GitHub 仓库来实现不同用途的分离和自动化管理。\n源码仓库（source_blog） 用于存储博客相关的源码， 包括markdown文件、配置信息等未构建的内容 设置为Private仓库 展示仓库（blog_show) 用于存储构建后的文件（如public文件夹），供Github Pages或其他托管服务使用 设为Public仓库，确保可以正常访问页面 自动化流程 利用Github Actions或脚本实现如下自动化：\n在源码仓库更新时触发构建操作，生成博客所需的静态文件 将生成的文件自动推送到展示仓库，无需手动干预 Settings-\u0026gt;Developer Settings-\u0026gt;Personal access tokens -\u0026gt; Tokens(classic),勾选repo和workflow，过期时间选择永远不过期\ngenerate token，然后复制生成的token\n点开source_blog,Security-Secrets and variables-Actions-Repository secrets,创建一个新的。\n自动化代码(deploy.yml)，\n1.修改分支改成master\n将.github_hugo移到blog下，并且去掉_hugo,作为部署文件\ngit init 创建.git 文件\nEXTERNAL_REPOSITORY:xx/blog_show，展示的博客\nblow_show里所展示的就是public里面的内容\nblow_show\u0026gt;Settings\u0026gt;Pages\u0026gt;Build and delployment master root\n你可以在根目录创建一个批处理脚本，用来快速启动本地服务器并使用 chrome 打开网页。\n1 2 3 4 5 6 本地运行.bat @echo off echo [本地运行] start chrome http://localhost:1313/ #默认开放1313端口 hugo server pause 使用Netlify Add newproject \u0026gt; import an existing project \u0026gt;选择blog_show\n如何建立自己的（博客）域名 ​\t以blog.xyz.site为例\n首先选择域名注册商，如阿里云,购买自定义域名如xyz.site.可以自定义子域名，如blog.xyz.site。\n配置DNS记录\n为了让 blog.xyz.com 指向你的 Netlify 博客，需要在域名注册商那里设置 DNS：\n登录域名注册商控制台。 进入[DNS 管理 或 域名解析 ]([云解析 DNS 控制台])(https://dnsnext.console.aliyun.com/authoritative/domains)页面。 添加以下记录： CNAME 记录 主机名/名称/记录：blog 指向/值/记录值：你的 Netlify 默认域名（chenaasad.netlify.app） TTL：默认即可 ⚠️ 注意：不要同时为同一个子域名添加 A 记录，如果添加了 CNAME，就不要再加 A 记录。\n保存并等待 DNS 生效（通常几分钟到 24 小时）。 在 Netlify 添加自定义域\n登录 Netlify 控制台，进入你的站点设置。\n选择 Domain management → Custom domains → Add custom domain。\n即Set up Netlify DNS 输入你的域名 blog.xyz.com 并保存。\nNetlify 会自动检测你的 CNAME 配置是否正确，如果一切正常，它会颁发 SSL 证书（HTTPS）。\nNetlify 会自动为自定义域名生成免费的 Let\u0026rsquo;s Encrypt SSL 证书。\n你只需要确保在站点设置中开启 Enforce HTTPS（强制 HTTPS）。\n等证书生效后，你的博客就可以通过 https://blog.xyz.com 访问。\nDNS 是否已传播\n即便你已经添加了正确的 CNAME 记录，DNS 修改需要一定时间才能在全球生效。\n一般 10 分钟到 24 小时不等。 可以用以下工具查询是否已生效： https://dnschecker.org/#CNAME/blog.chenalna.site 看到解析结果是 chenaasad.netlify.app 才算成功。 是否开启了 CDN/代理\n如果你使用 Cloudflare 或类似服务：\n确保 blog 这一条记录**小云朵为灰色（DNS only）**而不是橙色（代理状态）， 因为橙色会隐藏真实 CNAME，导致 Netlify 无法验证。 验证完成并签发证书后，可以再开启代理。 为什么需要两个方向的绑定？ 阿里云的作用\n阿里云是域名注册商，它只负责：\n记录「访问 blog.chenalna.site 时去哪台服务器找内容」 也就是DNS 解析（把域名解析成 IP 或转发到另一个域名） 你在阿里云添加 CNAME 记录，只是告诉互联网： “访问 blog.chenalna.site 时，请先去找 chenalna.netlify.app”。\n阿里云并不知道 chenalna.netlify.app 是不是你的站点，也不会给你的网站签 SSL 证书。 它只是把访问者“指路”给 Netlify。\n2.Netfliy作用\n​\tNetlify 是托管服务商，它必须：\n确认这个域名是你的（防止别人盗用你的域名指到他们的服务器） 为这个域名签发 SSL 证书（HTTPS 加密） 配置站点路由，把 blog.chenalna.site 的请求交给你的博客程序 所以你在 Netlify → Domain management 添加域名， 就是告诉 Netlify： “这个域名是我的，DNS 我已经指到你们这里，请为它提供服务并签证书。”\n总结\n阿里云：相当于邮局的“地址登记处”，你告诉它：\n“有人找 blog.chenalna.site，就送到 Netlify。”\nNetlify：相当于你自己的“房子”，你得告诉它：\n“这个地址归我，请给这个地址挂上门牌和门锁（SSL证书）。”\n归纳\n1️⃣ 你输入 https://blog.chenalna.site\n浏览器需要找到这个域名的 IP。\n向 DNS 递归服务器（例如阿里云）查询 blog.chenalna.site 的记录。\n阿里云返回： CNAME chenalna.netlify.app\n👉 这只是告诉浏览器： “blog.chenalna.site 的解析结果 等同于 chenalna.netlify.app， 你去解析这个域名就行。”\n2️⃣ 浏览器继续查询 chenalna.netlify.app\n递归 DNS 服务器向 Netlify 的权威 DNS 查询 A/AAAA 记录。\nNetlify 返回一个或多个 IP（通常是 CDN/负载均衡节点）。\n浏览器最终得到托管服务器 IP。\n3️⃣ 浏览器建立 TCP/TLS 连接\n浏览器连接到刚刚得到的 IP。\n如果是 HTTPS，会先发起 TLS 握手：\n在 ClientHello 里带上 SNI（Server Name Indication）：\n1 blog.chenalna.site 这样服务器才能选择正确的 SSL 证书。\n4️⃣ 浏览器发送 HTTP 请求\n握手完成后，浏览器发送标准 HTTP 请求：\n1 2 3 4 GET / HTTP/1.1 Host: blog.chenalna.site User-Agent: ... Accept: ... 关键点：Host = blog.chenalna.site 👉 即使连接的是 Netlify 的 IP， Host 告诉 Netlify：“我访问的是 blog.chenalna.site 项目。”\n5️⃣ Netlify 服务器返回内容\nNetlify 根据 Host 找到对应的项目（你 GitHub 部署的静态文件）。\n直接返回 HTML/CSS/JS 等静态资源。\n因为是静态站点，返回的就是最终网页文件，不需要再发起其他“对象请求”才能获取主体内容（除非页面里引用了图片、JS、CSS，这些会触发额外的 HTTP 请求）。\n域名类型 作用 是否必须 Netlify 子域名 chenalna.netlify.app Netlify 自动分配，始终可用，方便测试或直接访问 ✅ 自动拥有 自定义域名 blog.chenalna.site 你绑定的独立域名，用于品牌化访问 可选 它们共存，不冲突，访问最终落在同一个 Netlify 服务器和同一份内容上。\nEdge自带问题 此网站的证书无效。由于此连接不安全，因此信息(如密码或信用卡)不会安全地发送到此网站，并且可能被其他人截获或看到。建议你不要在此网站输入个人信息或避免使用此网站。 DNS 解析未生效\n你在阿里云添加了 blog.chenalna.site 的 CNAME，但 DNS 还没有在全球生效。 Netlify 还没检测到域名指向它的服务器，因此 无法签发 SSL 证书。 生效时间通常 10 分钟到 24 小时不等。 与此站点的连接不安全此站点有一个由受信任的颁发机构颁发的有效证书。但是，网站的某些部分不安全。这意味着信息 (如密码或信用卡) 可能不会安全地发送到此站点，并可能被其他人截获或查看。\nLet’s Encrypt 的证书 有效期为 90 天（约 3 个月）。\nNetlify 会在证书到期前 自动续签，无需手动干预。\n清除 Edge 缓存和证书状态\n打开 Edge → 设置 → 隐私、搜索和服务 → 清除浏览数据 → 勾选缓存文件、Cookie 也可以在地址栏输入 edge://net-internals/#dns → Clear host cache 再重新访问 https://blog.chenalna.site ","date":"2025-03-04T20:54:24+08:00","permalink":"https://example.com/p/test/","title":"Test"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://example.com/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://example.com/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://example.com/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://example.com/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://example.com/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://example.com/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$\r\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://example.com/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://example.com/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://example.com/p/emoji-support/","title":"Emoji Support"}]